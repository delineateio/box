---
- name: Bootstrap
  connection: local
  gather_facts: false
  hosts: all
  vars:
    ansible_python_interpreter: '/usr/bin/python3'
  become: true
  tasks:

# add variables --------------------------------------------------------

   - name: add vars
     include_vars:
      dir: vars
      extensions:
        - 'yml'

# bootstrap ------------------------------------------------------------

   - name: bootstrap
     block:
      - name: create ~/.bash_profile
        file:
          path: ~/.bash_profile
          state: touch
          modification_time: preserve
          access_time: preserve
      - name: add ~/.nanorc
        copy:
          src: ./files/nanorc
          dest:  ~/.nanorc
      - name: create ~/.hushlogin
        file:
          path: ~/.hushlogin
          state: touch
          modification_time: preserve
          access_time: preserve
      - name: create ~/.config
        file:
          path: ~/.config
          state: directory
     become_user: vagrant

# box ----------------------------------------------------------------

   - name: box
     block:
      - name: create .local/bin
        file:
          path: ~/.local/bin
          state: directory
          owner: vagrant
      - name: add ~/.local/bin/box
        copy:
          src: ./scripts/box.sh
          dest:  ~/.local/bin/box
          mode: '700'
     become_user: vagrant

# time sync ------------------------------------------------------------

   - name: timesync
     block:
      - name: add /etc/systemd/timesyncd.conf
        copy:
          src: ./files/timesyncd.conf
          dest: /etc/systemd/timesyncd.conf
      - name: set ntp
        command: timedatectl set-ntp true
      - name: start timesync service
        systemd:
          name: systemd-timesyncd.service
          enabled: yes
          state: started
          daemon_reload: yes

# install apt packages -----------------------------------------------

   - name: apt
     block:
      - name: add keys
        apt_key:
          keyserver: keyserver.ubuntu.com
          id: '{{ item.key }}'
        with_items:
          - { name: github, key: C99B11DEB97541F0 }
          - { name: osquery, key: 1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B }
        loop_control:
          label: '{{ item.name }}'
      - name: add keys by url
        apt_key:
          url: '{{ item.url }}'
        with_items:
          - { name: docker, url: 'https://download.docker.com/linux/ubuntu/gpg'  }
          - { name: gcloud, url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'}
        loop_control:
          label: '{{ item.name }}'
      - name: add apt repos
        apt_repository:
          repo: '{{ item.repo }}'
          state: present
        with_items: '{{ apt.repos }}'
        loop_control:
          label: '{{ item.name }}'
      - name: install apt packages
        apt:
          update_cache: true
          cache_valid_time: 604800 # one week
          pkg: '{{ apt.packages }}'
          state: present
          install_recommends: no

# install deb packages -----------------------------------------------

   - name: install deb packages
     apt:
      deb: '{{ item.url }}'
     with_items: '{{ deb.packages }}'
     loop_control:
      label: '{{ item.name }}'

# install archive packages -------------------------------------------

   - name: install archive packages
     unarchive:
       src: '{{ item.src }}'
       dest: '{{ item.dest }}'
       remote_src: yes
     with_items: '{{ archive.packages }}'
     loop_control:
       label: '{{ item.name }}'

# install url packages -----------------------------------------------

   - name: install url packages
     get_url:
      url: '{{ item.url }}'
      dest: '{{ item.dest }}'
      mode: '755'
     with_items: '{{ url.packages }}'
     loop_control:
      label: '{{ item.name }}'

# Install shell packages ---------------------------------------------

   - name: shell packages
     block:
      - name: install shell packages
        shell:
          cmd: '{{ item.cmd }}'
          creates: '{{ item.creates }}'
        args:
          warn: false
        with_items: '{{ shell.packages }}'
        loop_control:
          label: '{{ item.name }}'
     become: yes
     become_user: vagrant

# install gvm --------------------------------------------------------

   - name: gvm
     block:
      - name: add gvm/go env & source
        blockinfile:
          path: ~/.bash_profile
          marker: '# <--- gvm {mark} --->'
          marker_begin: start
          marker_end: end
          block: |
            export PATH=/go/bin:$PATH
            export PATH=$HOME/.gvm/bin:$PATH
            [[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
      - name: install go versions
        shell: bash -lc "gvm install 'go{{ item }}'"
        with_items: '{{ golang }}'
        loop_control:
          label: '{{ item }}'
      - name: select go version
        shell: bash -lc "gvm use 'go{{ use.golang }}'"
     become_user: vagrant

# install tfenv ------------------------------------------------------

   - name: install tfenv
     block:
     - name: clone tfenv
       git:
         repo: https://github.com/tfutils/tfenv.git
         dest: ~/.tfenv
         version: 'v{{ versions.tfenv }}'
     - name: create symlinks for tfenv
       file:
         src: ~/.tfenv/bin/{{ item }}
         path: ~/.local/bin/{{ item }}
         state: link
       loop:
       - tfenv
       - terraform
     - name: install terraform versions
       shell: ~/.local/bin/tfenv install '{{ item }}'
       with_items: '{{ terraform }}'
       loop_control:
         label: '{{ item }}'
     - name: select terraform version
       shell: ~/.local/bin/tfenv use '{{ use.terraform }}'
     become_user: vagrant


# install node  ------------------------------------------------------

   - name: nvm
     block:
     - name: add nvm config
       blockinfile:
         path: ~/.bash_profile
         marker: '# <--- nvm {mark} --->'
         marker_begin: start
         marker_end: end
         block: |
           export NVM_DIR=$HOME/.nvm
           [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
           [ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"
     - name: clone nvm
       git:
         repo: https://github.com/nvm-sh/nvm.git
         dest: ~/.nvm
         version: 'v{{ versions.nvm }}'
     - name: install node versions
       shell:
         cmd: bash -lc "nvm install --no-progress --default '{{ item }}'"
         executable: /bin/bash
         creates: ~/.nvm/versions/node/v{{ item }}/bin/node
       with_items: "{{ nodejs }}"
     - name: select node version
       shell: bash -lc "nvm use '{{ use.nodejs }}'"
     - name: get npm path
       shell:
         cmd: bash -lc "which npm"
         executable: /bin/bash
       register: npm_dir
     - name: install npm packages
       npm:
         name: '{{ item.name }}'
         version: '{{ item.version }}'
         global: yes
       with_items: '{{ npm.packages }}'
       loop_control:
         label: '{{ item.name }}'
       environment:
         PATH: '{{ npm_dir.stdout | dirname }}:{{ lookup("env", "PATH") }}'
     become_user: vagrant

# install pyenv ------------------------------------------------------

   - name: pyenv
     block:
      - name: clone pyenv
        git:
          repo: https://github.com/pyenv/pyenv.git
          dest: ~/.pyenv
          version: 'v{{ versions.pyenv }}'
      - name: clone pyenv-virtualenv
        git:
          repo: https://github.com/pyenv/pyenv-virtualenv.git
          dest: ~/.pyenv/plugins/pyenv-virtualenv
          version: 'v{{ versions.pyenv_virtualenv }}'
      - name: add pyenv env & eval
        blockinfile:
          path: ~/.bash_profile
          marker: '# <--- pyenv {mark} --->'
          marker_begin: start
          marker_end: end
          block: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"
      - name: install python versions
        shell:
          cmd: |
            bash -lc "pyenv install '{{ item }}' -s"
            bash -lc "pyenv virtualenv -f '{{ item }}' '.venv{{ item }}'"
          executable: /bin/bash
        args:
          creates: ~/.pyenv/versions/{{ item }}/envs/.venv{{ item }}/
        with_items: "{{ python }}"
        loop_control:
          label: '{{ item }}'
      - name: set global python version
        shell:
          cmd: bash -lc "pyenv global '{{ use.python }}'"
          executable: /bin/bash
     become_user: vagrant

# install pip packages -----------------------------------------------

   - name: pip
     block:
      - name: add pip to $PATH
        blockinfile:
          path: ~/.bash_profile
          marker: '# <--- pip {mark} --->'
          marker_begin: start
          marker_end: end
          block: export PATH=$HOME/.local/bin:$PATH
        become_user: vagrant
      - name: create ~/.pip
        file:
          path: ~/.pip
          state: directory
        become_user: vagrant
      - name: add pip config
        copy:
          src: ./files/pip.conf
          dest: ~/.pip/pip.conf
        become_user: vagrant
      - name: install pip packages
        pip:
          name: '{{ pip.packages }}'
        loop_control:
          label: '{{ item.name }}'

# install cloudquery -------------------------------------------------

   - name: cloudquery
     block:
     - name: clone cloudquery
       git:
         repo: https://github.com/cloudquery/cloudquery
         dest: /tmp/cloudquery
         version: 'v{{ versions.cloudquery }}'
     - name: build cloudquery
       command: go build .
       args:
        chdir: /tmp/cloudquery
        creates: /tmp/cloudquery/cloudquery
       environment:
          PATH: '/go/bin:{{ lookup("env", "PATH") }}'
     - name: move cloudquery to $PATH
       copy:
        src: /tmp/cloudquery/cloudquery
        dest: /usr/local/bin/cloudquery
        mode: '755'
        remote_src: true

# install octant -----------------------------------------------------

   - name: octant
     block:
      - name: add octant service
        copy:
          remote_src: yes
          src: ./services/octant.service
          dest: /etc/systemd/system/octant.service
          owner: root
      - name: start octant service
        systemd:
          name: octant.service
          enabled: yes
          state: started
          daemon_reload: yes

# install caddy ------------------------------------------------------

   - name: caddy
     block:
      - name: create caddy group
        group:
          name: caddy
          state: present
      - name: add to caddy group
        user:
          name: vagrant
          groups: caddy
          append: yes
      - name: build caddy & cloudflare plugin
        shell: xcaddy build --output /tmp --with github.com/caddy-dns/cloudflare
        args:
          creates: /usr/bin/caddy
        environment:
          PATH: '/go/bin:{{ lookup("env", "PATH") }}'
      - name: moves caddy to $PATH
        command: mv /tmp/caddy /usr/bin/caddy
        args:
          creates: /usr/bin/caddy
      - name: enables caddy port usage
        command: setcap CAP_NET_BIND_SERVICE=+eip /usr/bin/caddy
      - name: Create caddy directory
        file:
          path: /etc/caddy
          state: directory
      - name: add caddyfile
        copy:
          src: ./files/Caddyfile
          dest: /etc/caddy/Caddyfile
      - name: add caddy service
        copy:
          remote_src: yes
          src: ./services/caddy.service
          dest: /etc/systemd/system/caddy.service
          owner: root
      - name: start caddy service
        systemd:
          name: caddy.service
          enabled: yes
          state: started
          daemon_reload: yes
      - name: add to /etc/hosts
        blockinfile:
          marker: "# <--- host '{{ item }}' {mark} --->"
          marker_begin: start
          marker_end: end
          path: /etc/hosts
          block: |
            {{ item.ip }}  {{ item.domain }}
        with_items: '{{ hosts }}'
        loop_control:
          label: '{{ item.name }} -> {{ item.domain }}'
     become: yes

# config aliases -----------------------------------------------------

   - name: add aliases
     blockinfile:
       path: ~/.bash_profile
       marker: '# <--- aliases {mark} --->'
       marker_begin: start
       marker_end: end
       block: |
         alias clear="clear && figlet 'getbox.io' | lolcat --seed 18"
     become_user: vagrant

# config gcloud ------------------------------------------------------

   - name: add gcp env
     blockinfile:
       path: ~/.bash_profile
       marker: '# <--- gcloud {mark} --->'
       marker_begin: start
       marker_end: end
       block: export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.gcloud.json
     become_user: vagrant

# config rust --------------------------------------------------------

   - name: add source scala
     blockinfile:
       path: ~/.bash_profile
       marker: '# <--- rust {mark} --->'
       marker_begin: start
       marker_end: end
       block: source "$HOME/.cargo/env"
     become_user: vagrant

# config starship ----------------------------------------------------

   - name: starship
     block:
      - name: add starship eval
        blockinfile:
          path: ~/.bash_profile
          marker: '# <--- starship {mark} --->'
          marker_begin: start
          marker_end: end
          block: eval "$(starship init bash)"
      - name: configure starship
        copy:
          src: ./files/starship.toml
          dest: ~/.config/starship.toml
     become_user: vagrant

# configure git ------------------------------------------------------

   - name: git
     block:
      - name: configure git # git
        copy:
          src: '{{ item.src }}'
          dest: '{{ item.dest }}'
          force: '{{ item.force }}'
        with_items:
          - { name: gitconfig, src: ./files/gitconfig, dest: ~/.gitconfig, force: no }
          - { name: gitignore, src: ./files/gitignore, dest: ~/.gitignore, force: yes }
          - { name: gitmessage, src: ./files/gitmessage, dest: ~/.gitmessage, force: yes }
        loop_control:
          label: '{{ item.name }}'
        become_user: vagrant
      - name: add gpg tty env
        blockinfile:
          path: ~/.bash_profile
          marker: '# <--- gpg tty {mark} --->'
          marker_begin: start
          marker_end: end
          block: export GPG_TTY="$(tty)"
        become_user: vagrant

# configure bat ------------------------------------------------------

   - name: bat
     block:
      - name: add bat config
        copy:
          src: ./files/bat.conf
          dest: ~/.config/bat.conf
      - name: add bat env
        blockinfile:
          path: ~/.bash_profile
          marker: '# <--- bat {mark} --->'
          marker_begin: start
          marker_end: end
          block: export BAT_CONFIG_PATH=$HOME/.config/bat.conf
     become_user: vagrant

# configure docker ---------------------------------------------------

   - name: docker
     block:
      - name: create docker group
        group:
          name: docker
          state: present
      - name: add to docker group
        user:
          name: vagrant
          groups: docker
          append: yes
      - name: start docker service
        systemd:
          name: docker.service
          daemon_reload: yes
          enabled: yes
          state: started
      - name: add docker prune job
        cron:
          name: docker prune
          hour: "02"
          job: docker system prune -f
          user: vagrant
          cron_file: docker_prune

# run postgres -------------------------------------------------------

   - name: postgres
     block:
      - name: install docker module
        pip:
          name: 'docker=={{ versions.docker }}'
      - name: start postgres container
        docker_container:
          name: postgres
          image: 'postgres:{{ tags.postgres }}'
          state: started
          restart_policy: always
          ports:
          - "5432:5432"
          env:
            SECRET_KEY: postgres
      - name: add .pgpass file
        copy:
          remote_src: yes
          src: ./files/pgpass
          dest: ~/.pgpass
          owner: vagrant
          mode: '600'
        become_user: vagrant

# clear --------------------------------------------------------------

   - name: add clear
     blockinfile:
       path: ~/.bash_profile
       marker: '# <--- clear {mark} --->'
       marker_begin: start
       marker_end: end
       block: clear
     become_user: vagrant
