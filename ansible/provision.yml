---
- name: Bootstrap
  connection: local
  gather_facts: false
  hosts: all
  vars:
    ansible_python_interpreter: /usr/bin/python3.6
  become: true
  tasks:

   - name: Create hush file
     file:
       path: ~/.hushlogin
       state: touch
       modification_time: preserve
       access_time: preserve
     become_user: vagrant

   - name: Create empty .env file
     file:
       path: ~/.env
       state: touch
       modification_time: preserve
       access_time: preserve
     become_user: vagrant

   - name: Create pip directory
     file:
       path: ~/.pip
       state: directory
     become_user: vagrant

   - name: Add bootstrap files # add files
     copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      force: no
     with_items:
      - { name: nano, src: ./config/nanorc, dest: ~/.nanorc }
      - { name: pip, src: ./config/pip.conf, dest: ~/.pip/pip.conf }
      - { name: profile, src: ./config/bash_profile, dest: ~/.bash_profile }
      - { name: title, src: ./config/title, dest: ~/.title }
     loop_control:
      label: '{{ item.name }}'
     become_user: vagrant

   - block: # time sync
      - name: Add Cloudflare file
        copy:
          src: ./config/timesyncd.conf
          dest: /etc/systemd/timesyncd.conf
      - name: Set ntp On
        command: timedatectl set-ntp true
      - name: TimeSync service
        systemd:
          name: systemd-timesyncd.service
          state: started
          enabled: yes

# installs (apt) -----------------------------------------------------

   - block: # apt keys
      - name: Add keys by url
        apt_key:
          url: '{{ item.url }}'
        with_items:
          - { name: docker, url: 'https://download.docker.com/linux/ubuntu/gpg'  }
          - { name: gcloud, url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'}
        loop_control:
          label: '{{ item.name }}'
      - name: Add keys directly
        apt_key:
          keyserver: keyserver.ubuntu.com
          id: '{{ item.key }}'
        with_items:
          - { name: github, key: C99B11DEB97541F0 }
          - { name: osquery, key: 1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B }
        loop_control:
          label: '{{ item.name }}'

   - name: Add apt repos # apt repos
     apt_repository:
      repo: '{{ item.repo }}'
      state: present
     with_items:
      - { name: docker, repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable' }
      - { name: gcloud, repo: 'deb https://packages.cloud.google.com/apt cloud-sdk main' }
      - { name: github, repo: 'deb https://cli.github.com/packages bionic main' }
      - { name: osquery, repo: 'deb [arch=amd64] https://pkg.osquery.io/deb deb main' }
      - { name: pack, repo: 'ppa:cncf-buildpacks/pack-cli' }
      - { name: python, repo: 'ppa:deadsnakes/ppa' }
      - { name: ruby, repo: 'ppa:brightbox/ruby-ng' }
     loop_control:
      label: '{{ item.name }}'

   - name: Upgrade apt cache
     apt:
      update_cache: true
      cache_valid_time: 604800 # one week

   - name: Install apt packages
     apt:
      pkg:
       - apt-transport-https=1.6.12ubuntu0.2
       - bison=2:3.0.4.dfsg-1build1
       - build-essential=12.4ubuntu1
       - build-essential=12.4ubuntu1
       - containerd.io=1.4.3-1
       - default-jre=2:1.11-68ubuntu1~18.04.1
       - docker-ce-cli=5:20.10.2~3-0~ubuntu-bionic
       - docker-ce=5:20.10.2~3-0~ubuntu-bionic
       - figlet=2.2.5-3
       - fonts-firacode=1.204-2
       - gcc=4:7.4.0-1ubuntu2.3
       - gh=1.5.0
       - gnupg2=2.2.4-1ubuntu1.3
       - google-cloud-sdk-skaffold=323.0.0-0
       - google-cloud-sdk=323.0.0-0
       - httpie=0.9.8-2
       - iotop=0.6-2
       - jq=1.5+dfsg-2
       - kubectl=1.20.2-00
       - libbz2-dev=1.0.6-8.1ubuntu0.2
       - libffi-dev=3.2.1-8
       - liblzma-dev=5.2.2-1.3
       - libncurses5-dev=6.1-1ubuntu1.18.04
       - libreadline-dev=7.0-3
       - libsqlite3-dev=3.22.0-1ubuntu0.4
       - libssl-dev=1.1.1-1ubuntu2.1~18.04.7
       - libxml2-dev=2.9.4+dfsg1-6.1ubuntu1.3
       - llvm=1:6.0-41~exp5~ubuntu1
       - lolcat=42.0.99-1
       - make=4.1-9.1ubuntu1
       - mtr=0.92-1
       - neofetch=3.4.0-1
       - nginx=1.14.0-0ubuntu1.7
       - nmap=7.60-1ubuntu5
       - nmon=16g+debian-3
       - osquery=4.5.1-1.linux
       - pack-cli=0.16.0-0ubuntu1~bionic
       - pinentry-curses=1.1.0-1
       - pinentry-gtk2=1.1.0-1
       - pkg-config=0.29.1-0ubuntu2
       - postgresql-client=10+190ubuntu0.1
       - python3-pip=9.0.1-2.3~ubuntu1.18.04.4
       - rlwrap=0.43-1
       - rng-tools=5-0ubuntu4
       - ruby2.6-dev=2.6.6-1bbox1~bionic1
       - ruby2.6=2.6.6-1bbox1~bionic1
       - screen=4.6.2-1ubuntu1
       - shellcheck=0.4.6-1
       - tk-dev=8.6.0+9
       - tree=1.7.0-5
       - unzip=6.0-21ubuntu1.1
       - xz-utils=5.2.2-1.3
       - zip=3.0-11build1
       - zlib1g-dev=1:1.2.11.dfsg-0ubuntu2
      state: present
      install_recommends: no

   - name: Install deb packages
     apt:
      deb: '{{ item.deb }}'
     with_items:
      - { name: bat, deb: 'https://github.com/sharkdp/bat/releases/download/v0.17.1/bat_0.17.1_amd64.deb' }
      - { name: octant, deb: 'https://github.com/vmware-tanzu/octant/releases/download/v0.16.3/octant_0.16.3_Linux-64bit.deb' }
      - { name: scala, deb: 'https://downloads.lightbend.com/scala/2.12.12/scala-2.12.12.deb' }
      - { name: trivy, deb: 'https://github.com/aquasecurity/trivy/releases/download/v0.9.1/trivy_0.9.1_Linux-64bit.deb' }
     loop_control:
      label: '{{ item.name }}'

   - name: Clean apt packages
     apt:
      autoremove: yes
      autoclean: yes

# installs (other) ---------------------------------------------------
   - name: Install tfenv
     block:
     - name: Check if .local/bin directory exist
       stat:
         path: ~/.local/bin
       register: local_bin

     - name: Create .local/bin directory
       file:
         path: ~/.local/bin
         state: directory
       when: local_bin.stat.exists == false

     - name: Clone tfenv repository
       git:
         repo: https://github.com/tfutils/tfenv.git
         dest: ~/.tfenv

     - name: Create symbolic links to tfenv scripts
       file:
         src: ~/.tfenv/bin/{{ item }}
         path: ~/.local/bin/{{ item }}
         state: link
       loop:
       - tfenv
       - terraform

     become_user: vagrant

   - name: Install nvm and node
     block:
     - name: Clone nvm repository
       git:
         repo: https://github.com/nvm-sh/nvm.git
         dest: ~/.nvm
         version: v0.37.2

     - name: Install Node.js v10
       shell:
         cmd: 'source ~/.nvm/nvm.sh && {{ item }}'
         executable: /bin/bash
       loop:
       - nvm install --no-progress --default v10
       - nvm which default
       register: nvm

     - name: Get node/npm path from nvm
       shell: dirname '{{ nvm.results[-1].stdout }}'
       register: nvm_path

     become_user: vagrant

   - name: Install npm packages
     npm:
      name: '{{ item.name }}'
      version: '{{ item.version }}'
      state: present
      global: yes
     with_items:
      - { name: express, version: 4.17.1 }
      - { name: serverless, version: 2.18.0 }
      - { name: snyk, version: 1.437.3 }
      - { name: stts, version: 1.2.2 }
     loop_control:
      label: '{{ item.name }}'
     environment:
       PATH: '{{ nvm_path.stdout }}:{{ lookup("env", "PATH") }}'

   - name: Install pip packages
     pip:
      name:
       - docker==4.4.1
       - detect-secrets==0.14.3
       - pre-commit==2.9.3

   - block: # shell installs
      - name: Unarchive installs (root)
        unarchive:
          src: '{{ item.src }}'
          dest: '{{ item.dest }}'
          creates: '{{ item.creates }}'
          remote_src: yes
        with_items:
          - { name: docker-credential-gcr, src: 'https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v2.0.2/docker-credential-gcr_linux_amd64-2.0.2.tar.gz', dest: /usr/local/bin/, creates: /usr/local/bin/docker-credential-gcr}
          - { name: golang, src: 'https://golang.org/dl/go1.15.6.linux-amd64.tar.gz', dest: /, creates: /go/bin }
          - { name: packer, src: 'https://releases.hashicorp.com/packer/1.6.6/packer_1.6.6_linux_amd64.zip', dest: /usr/local/bin/, creates: /usr/local/bin/packer}
        loop_control:
          label: '{{ item.name }}'

   - name: Get url installs
     get_url:
      url: '{{ item.url }}'
      dest: '{{ item.dest }}'
      mode: '755'
     with_items:
      - { name: hey, url: 'https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64', dest: /usr/local/bin/hey }
      - { name: mkcert, url: 'https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64', dest: /usr/local/bin/mkcert }
      - { name: st, url: 'https://storage.googleapis.com/container-structure-test/v1.9.1/container-structure-test-linux-amd64', dest: /usr/local/bin/container-structure-test }
     loop_control:
      label: '{{ item.name }}'

   - block: # shell installs
      - name: Shell installs (root)
        shell:
          cmd: '{{ item.cmd }}'
          creates: '{{ item.creates }}'
        args:
          warn: false
        with_items:
          - { name: bat, cmd: 'curl -fsSL https://starship.rs/install.sh | bash -s -- -y', creates: /usr/local/bin/starship }
          - { name: clojure, cmd: 'curl -fLSs https://download.clojure.org/install/linux-install-1.10.1.763.sh | bash', creates: /usr/local/bin/clj }
          - { name: circleci, cmd: 'curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | VERSION=0.1.11540 bash', creates: /usr/local/bin/circleci}
          - { name: golangci, cmd: 'curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v1.33.0', creates: /usr/local/bin/golangci-lint}
          - { name: inspec, cmd: 'curl https://omnitruck.chef.io/install.sh | bash -s -- -v 4.24.8 -P inspec', creates: /usr/bin/inspec }
        loop_control:
          label: '{{ item.name }}'
      - name: Shell installs (vagrant)
        shell:
          cmd: '{{ item.cmd }}'
          creates: '{{ item.creates }}'
        with_items:
          - { name: gvm, cmd: 'curl -fLSs https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer | bash', creates: /home/vagrant/.gvm/bin/gvm}
          - { name: rust, cmd: 'curl https://sh.rustup.rs -sSf | sh -s -- -y', creates: ~/.cargo/bin/rustc }
        loop_control:
          label: '{{ item.name }}'
        args:
          warn: false
        become_user: vagrant

# pyenv --------------------------------------------------------------

   - block: # pyenv
      - name: Clone pyenv
        git:
          repo: https://github.com/pyenv/pyenv.git
          dest: ~/.pyenv
      - name: Clone pyenv-virtualenv
        git:
          repo: https://github.com/pyenv/pyenv-virtualenv.git
          dest: ~/.pyenv/plugins/pyenv-virtualenv
      - name: Add pyenv variables
        blockinfile:
          path: ~/.bash_profile
          insertafter: "# <!-- env END -->"
          marker: "# <!-- pyenv env {mark} -->"
          block: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
      - name: Add pyenv eval
        blockinfile:
          path: ~/.bash_profile
          insertafter: "# <!-- eval END -->"
          marker: "# <!-- pyenv eval {mark} -->"
          block: |
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"
      - name: Install python versions
        command: ~/.pyenv/bin/pyenv install {{ item }} -s
        args:
          creates: ~/.pyenv/versions/{{ item }}
        with_items:
          - 3.9.1
          - 3.8.5
        loop_control:
          label: '{{ item }}'
      - name: Create virtual env
        command: ~/.pyenv/bin/pyenv virtualenv -f {{ item }} .venv{{ item }}
        with_items:
          - 3.9.1
          - 3.8.5
        loop_control:
          label: '{{ item }}'
     become_user: vagrant

# general config -----------------------------------------------------

   - block: # user config
      - name: Create config directory
        file:
          path: ~/.config
          state: directory
      - name: Configure starship
        copy:
          src: ./config/starship.toml
          dest: ~/.config/starship.toml
      - name: Configure bat
        copy:
          src: ./config/bat.conf
          dest: ~/.config/bat.conf
        become_user: vagrant

# git ----------------------------------------------------------------

      - name: Configure git # git
        copy:
          src: '{{ item.src }}'
          dest: '{{ item.dest }}'
          force: '{{ item.force }}'
        with_items:
          - { name: gitconfig, src: ./config/gitconfig, dest: ~/.gitconfig, force: no }
          - { name: gitignore, src: ./config/gitignore, dest: ~/.gitignore, force: yes }
          - { name: gitmessage, src: ./config/gitmessage, dest: ~/.gitmessage, force: yes }
        loop_control:
          label: '{{ item.name }}'
     become_user: vagrant

# docker -------------------------------------------------------------

   - block: # docker
      - name: Create Docker group
        group:
          name: docker
          state: present
      - name: Add Docker Group
        user:
          name: vagrant
          groups: docker
          append: yes
      - name: Start docker service
        systemd:
          name: docker.service
          daemon_reload: yes
          enabled: yes
          state: started
      - name: Docker prune cron job
        cron:
          name: docker prune
          hour: "02"
          job: docker system prune -f
          user: vagrant
          cron_file: docker_prune

# kubectl ------------------------------------------------------------

      - name: Create .kube directory
        file:
          path: ~/.kube
          state: directory
          owner: vagrant
        become_user: vagrant

# postgres -----------------------------------------------------------

   - block:
      - name: Postgres container
        docker_container:
          name: postgres
          image: postgres:11.6
          state: started
          restart_policy: always
          ports:
          - "5432:5432"
          env:
            SECRET_KEY: postgres
      - name: Add .pgpass file
        copy:
          remote_src: yes
          src: ./config/pgpass
          dest: ~/.pgpass
          owner: vagrant
          mode: '600'
        become_user: vagrant

# octant -------------------------------------------------------------

   - block: # octant
      - name: Add octant service
        copy:
          remote_src: yes
          src: ./services/octant.service
          dest: /etc/systemd/system/octant.service
          owner: root
      - name: Start octant service
        systemd:
          name: octant.service
          enabled: yes
          state: started
          daemon_reload: yes

# certs --------------------------------------------------------------

   - block: # self signed cert
      - name: Create tls directory
        file:
          path: /tls
          state: directory
          mode: '755'
      - name: Generate tls certificate
        shell: |
          mkcert -uninstall
          mkcert -install
          mkcert -cert-file /tls/box.local.crt -key-file /tls/box.local.key 'box.local' localhost 127.0.0.1 ::1
        args:
          creates: /tls/box.local.crt

# nginx --------------------------------------------------------------

   - block: # nginx
      - name: Remove default nginx config
        file:
          path: /etc/nginx/sites-enabled/default
          state: absent
      - name: Add nginx config
        copy:
          src: ./config/nginx.conf
          dest: /etc/nginx/sites-enabled/nginx.conf
      - name: Start nginx service
        systemd:
          name:  nginx.service
          enabled: yes
          state: started
          daemon_reload: yes

# project ------------------------------------------------------------

   - block: # project
      - name: Download Project
        unarchive:
          src:  https://github.com/delineateio/project/archive/latest.tar.gz
          dest: /tmp/
          remote_src: yes
      - name: Add Project
        command: mv /tmp/project-latest ~/project
        args:
          creates: ~/project
      - name: Init Git
        command: git init --quiet
        args:
          chdir: ~/project
          creates: ~/project/.git
      - name: Install pre-commit
        command: pre-commit install --install-hooks
        args:
          chdir: ~/project
     become_user: vagrant
