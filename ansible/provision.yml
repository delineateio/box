---
- name: Bootstrap
  connection: local
  gather_facts: false
  hosts: all
  vars:
    ansible_python_interpreter: '/usr/bin/python3.6'
  become: true
  tasks:

# variables ------------------------------------------------------------

   - name: Add vars
     include_vars:
      dir: vars
      extensions:
        - 'yml'

# bootstrap ------------------------------------------------------------

   - name: Create hush file
     file:
       path: ~/.hushlogin
       state: touch
       modification_time: preserve
       access_time: preserve
     become_user: vagrant

   - name: Create empty .env file
     file:
       path: ~/.env
       state: touch
       modification_time: preserve
       access_time: preserve
     become_user: vagrant

   - name: Create pip directory
     file:
       path: ~/.pip
       state: directory
     become_user: vagrant

   - name: Add bootstrap files # add files
     copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      force: '{{ item.force }}'
     with_items:
      - { name: nano, src: ./config/nanorc, dest: ~/.nanorc, force: yes}
      - { name: pip, src: ./config/pip.conf, dest: ~/.pip/pip.conf, force: yes }
      - { name: profile, src: ./config/bash_profile, dest: ~/.bash_profile, force: no }
     loop_control:
      label: '{{ item.name }}'
     become_user: vagrant

   - block: # time sync
      - name: Add Cloudflare file
        copy:
          src: ./config/timesyncd.conf
          dest: /etc/systemd/timesyncd.conf
      - name: Set NTP on
        command: timedatectl set-ntp true
      - name: TimeSync service
        systemd:
          name: systemd-timesyncd.service
          enabled: yes
          state: started
          daemon_reload: yes

# installs (apt) -----------------------------------------------------

   - block: # apt keys
      - name: Add keys by url
        apt_key:
          url: '{{ item.url }}'
        with_items:
          - { name: docker, url: 'https://download.docker.com/linux/ubuntu/gpg'  }
          - { name: gcloud, url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'}
        loop_control:
          label: '{{ item.name }}'
      - name: Add keys directly
        apt_key:
          keyserver: keyserver.ubuntu.com
          id: '{{ item.key }}'
        with_items:
          - { name: github, key: C99B11DEB97541F0 }
          - { name: osquery, key: 1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B }
        loop_control:
          label: '{{ item.name }}'

   - name: Add apt repos # apt repos
     apt_repository:
      repo: '{{ item.repo }}'
      state: present
     with_items:
      - { name: docker, repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable' }
      - { name: gcloud, repo: 'deb https://packages.cloud.google.com/apt cloud-sdk main' }
      - { name: github, repo: 'deb https://cli.github.com/packages bionic main' }
      - { name: osquery, repo: 'deb [arch=amd64] https://pkg.osquery.io/deb deb main' }
      - { name: pack, repo: 'ppa:cncf-buildpacks/pack-cli' }
      - { name: ruby, repo: 'ppa:brightbox/ruby-ng' }
     loop_control:
      label: '{{ item.name }}'

   - name: Upgrade apt cache
     apt:
      update_cache: true
      cache_valid_time: 604800 # one week

   - name: Install apt packages
     apt:
      pkg: '{{ apt.packages }}'
      state: present
      install_recommends: no

   - name: Install deb packages
     apt:
      deb: '{{ item.deb }}'
     with_items:
      - { name: bat, deb: 'https://github.com/sharkdp/bat/releases/download/v0.17.1/bat_{{ versions.bat }}_amd64.deb' }
      - { name: octant, deb: 'https://github.com/vmware-tanzu/octant/releases/download/v{{ versions.octant }}/octant_{{ versions.octant }}_Linux-64bit.deb' }
      - { name: scala, deb: 'https://downloads.lightbend.com/scala/{{ versions.scala }}/scala-{{ versions.scala }}.deb' }
      - { name: trivy, deb: 'https://github.com/aquasecurity/trivy/releases/download/v{{ versions.trivy }}/trivy_{{ versions.trivy }}_Linux-64bit.deb' }
      - { name: xcaddy, deb: 'https://github.com/caddyserver/xcaddy/releases/download/v{{ versions.xcaddy }}/xcaddy_{{ versions.xcaddy }}_linux_amd64.deb' }
     loop_control:
      label: '{{ item.name }}'

   - name: Clean apt packages
     apt:
      autoremove: yes
      autoclean: yes

# installs (tfenv) ---------------------------------------------------

   - name: Install tfenv
     block:
     - name: Create .local/bin directory
       file:
         path: ~/.local/bin
         state: directory
     - name: Clone tfenv repository
       git:
         repo: https://github.com/tfutils/tfenv.git
         dest: ~/.tfenv
         version: 'v{{ versions.tfenv }}'
     - name: Create symbolic links to tfenv scripts
       file:
         src: ~/.tfenv/bin/{{ item }}
         path: ~/.local/bin/{{ item }}
         state: link
       loop:
       - tfenv
       - terraform
     - name: Install terraform versions
       command: 'tfenv install {{ item }}'
       with_items: '{{ terraform }}'
       loop_control:
         label: '{{ item }}'
     - name: Select terraform version
       command: 'tfenv use {{ versions.terraform }}'
     become_user: vagrant

# installs (nvm & node)  ---------------------------------------------

   - name: Install node and nvm
     block:
     - name: Clone nvm repository
       git:
         repo: https://github.com/nvm-sh/nvm.git
         dest: ~/.nvm
         version: 'v{{ versions.nvm }}'
     - name: Install Node.js versions
       shell:
         cmd: 'source ~/.nvm/nvm.sh && nvm install --no-progress --default {{ item }}'
         creates: ~/.nvm/versions/node/v{{ item }}/bin/node
         executable: /bin/bash
       with_items: "{{ nodejs }}"
       register: nvm
     - name: Select Node.js versions.bat
       shell:
         cmd: 'source ~/.nvm/nvm.sh && nvm which {{ versions.nodejs }}'
         executable: /bin/bash
     - name: Get node/npm path from nvm
       shell: dirname '{{ nvm.results[-1].stdout }}'
       register: nvm_path
     become_user: vagrant
   - name: Install npm packages
     npm:
      name: '{{ item.name }}'
      version: '{{ item.version }}'
      state: present
      global: yes
     with_items: '{{ npm.packages }}'
     loop_control:
      label: '{{ item.name }}'
     environment:
       PATH: '{{ nvm_path.stdout }}:{{ lookup("env", "PATH") }}'

# installs (pip)  ----------------------------------------------------

   - name: Install pip packages
     pip:
      name: '{{ pip.packages }}'

# installs (unarchive)  ----------------------------------------------

   - block: # shell installs
      - name: Unarchive installs (root)
        unarchive:
          src: '{{ item.src }}'
          dest: '{{ item.dest }}'
          remote_src: yes
        with_items:
          - { name: docker-credential-gcr, src: 'https://github.com/GoogleCloudPlatform/docker-credential-gcr/releases/download/v{{ versions.docker_credential_gcr }}/docker-credential-gcr_linux_amd64-{{ versions.docker_credential_gcr }}.tar.gz', dest: /usr/local/bin/, creates: /usr/local/bin/docker-credential-gcr}
          - { name: golang, src: 'https://golang.org/dl/go{{ versions.golang }}.linux-amd64.tar.gz', dest: /, creates: /go/bin }
          - { name: packer, src: 'https://releases.hashicorp.com/packer/{{ versions.packer }}/packer_{{ versions.packer }}_linux_amd64.zip', dest: /usr/local/bin/, creates: /usr/local/bin/packer}
        loop_control:
          label: '{{ item.name }}'
   - name: Get url installs
     get_url:
      url: '{{ item.url }}'
      dest: '{{ item.dest }}'
      mode: '755'
     with_items:
      - { name: hey, url: 'https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64', dest: /usr/local/bin/hey }
      - { name: cst, url: 'https://storage.googleapis.com/container-structure-test/v{{ versions.cst }}/container-structure-test-linux-amd64', dest: /usr/local/bin/container-structure-test }
     loop_control:
      label: '{{ item.name }}'

# octant -------------------------------------------------------------

   - block: # octant
      - name: Add Octant service
        copy:
          remote_src: yes
          src: ./services/octant.service
          dest: /etc/systemd/system/octant.service
          owner: root
      - name: Start Octant service
        systemd:
          name: octant.service
          enabled: yes
          state: started
          daemon_reload: yes

# caddy --------------------------------------------------------------

   - block: # caddy
      - name: Create Caddy group
        group:
          name: caddy
          state: present
      - name: Add to Caddy group
        user:
          name: vagrant
          groups: caddy
          append: yes
      - name: Build Caddy with Cloudflare plugin
        shell: |
          xcaddy build --output /tmp --with github.com/caddy-dns/cloudflare
        args:
          creates: /usr/bin/caddy
        environment:
          PATH: '/go/bin:{{ lookup("env", "PATH") }}'
      - name: Moves Caddy to $PATH
        command: mv /tmp/caddy /usr/bin/caddy
        args:
          creates: /usr/bin/caddy
      - name: Enables Caddy port usage
        command: setcap CAP_NET_BIND_SERVICE=+eip /usr/bin/caddy
      - name: Create Caddy directory
        file:
          path: /etc/caddy
          state: directory
      - name: Add Caddyfile
        copy:
          src: ./config/Caddyfile
          dest: /etc/caddy/Caddyfile
      - name: Add Caddy service
        copy:
          remote_src: yes
          src: ./services/caddy.service
          dest: /etc/systemd/system/caddy.service
          owner: root
      - name: Start Octant service
        systemd:
          name: caddy.service
          enabled: yes
          state: started
          daemon_reload: yes
      - name: Add mappings to /etc/hosts
        blockinfile:
          path: /etc/hosts
          block: |
            {{ item.ip }}  {{ item.domain }}
          marker: "#  host '{{ item }}' {mark} "
        with_items: '{{ hosts }}'
        loop_control:
          label: '{{ item.name }} -> {{ item.domain }}'
     become: yes

   - block: # shell installs
      - name: Shell installs (root)
        shell:
          cmd: '{{ item.cmd }}'
          creates: '{{ item.creates }}'
        args:
          warn: false
        with_items:
          - { name: bat, cmd: 'curl -fsSL https://starship.rs/install.sh | bash -s -- -y', creates: /usr/local/bin/starship }
          - { name: clojure, cmd: 'curl -fLSs https://download.clojure.org/install/linux-install-{{ versions.clojure }}.sh | bash', creates: /usr/local/bin/clj }
          - { name: circleci, cmd: 'curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | VERSION={{ versions.circleci }} bash', creates: /usr/local/bin/circleci}
          - { name: golangci, cmd: 'curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sudo sh -s -- -b /usr/local/bin v{{ versions.golangci_lint }}', creates: /usr/local/bin/golangci-lint}
          - { name: inspec, cmd: 'curl https://omnitruck.chef.io/install.sh | bash -s -- -v {{ versions.inspec }} -P inspec', creates: /usr/bin/inspec }
        loop_control:
          label: '{{ item.name }}'
      - name: Shell installs (vagrant)
        shell:
          cmd: '{{ item.cmd }}'
          creates: '{{ item.creates }}'
        with_items:
          - { name: gvm, cmd: 'curl -fLSs https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer | bash', creates: /home/vagrant/.gvm/bin/gvm}
          - { name: rust, cmd: 'curl https://sh.rustup.rs -sSf | sh -s -- -y', creates: ~/.cargo/bin/rustc }
        loop_control:
          label: '{{ item.name }}'
        args:
          warn: false
        become_user: vagrant

# pyenv --------------------------------------------------------------

   - block: # pyenv
      - name: Clone pyenv
        git:
          repo: https://github.com/pyenv/pyenv.git
          dest: ~/.pyenv
          version: 'v{{ versions.pyenv }}'
      - name: Clone pyenv-virtualenv
        git:
          repo: https://github.com/pyenv/pyenv-virtualenv.git
          dest: ~/.pyenv/plugins/pyenv-virtualenv
          version: 'v{{ versions.pyenv_virtualenv }}'
      - name: Add pyenv variables
        blockinfile:
          path: ~/.bash_profile
          insertafter: "# <!-- env END -->"
          marker: "# <!-- pyenv env {mark} -->"
          block: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
      - name: Add pyenv eval
        blockinfile:
          path: ~/.bash_profile
          insertafter: "# <!-- eval END -->"
          marker: "# <!-- pyenv eval {mark} -->"
          block: |
            eval "$(pyenv init -)"
            eval "$(pyenv virtualenv-init -)"
      - name: Install python versions
        command: ~/.pyenv/bin/pyenv install {{ item }} -s
        args:
          creates: ~/.pyenv/versions/{{ item }}
        with_items: "{{ python }}"
        loop_control:
          label: '{{ item }}'
      - name: Create virtual env
        command: ~/.pyenv/bin/pyenv virtualenv -f {{ item }} .venv{{ item }}
        args:
            creates: ~/.pyenv/versions/{{ item }}/envs/.venv{{ item }}/
        with_items: "{{ python }}"
        loop_control:
          label: '{{ item }}'
     become_user: vagrant

# general config -----------------------------------------------------

   - block: # user config
      - name: Create config directory
        file:
          path: ~/.config
          state: directory
      - name: Configure Starship
        copy:
          src: ./config/starship.toml
          dest: ~/.config/starship.toml
      - name: Configure bat
        copy:
          src: ./config/bat.conf
          dest: ~/.config/bat.conf
        become_user: vagrant

# git ----------------------------------------------------------------

      - name: Configure Git # git
        copy:
          src: '{{ item.src }}'
          dest: '{{ item.dest }}'
          force: '{{ item.force }}'
        with_items:
          - { name: gitconfig, src: ./config/gitconfig, dest: ~/.gitconfig, force: no }
          - { name: gitignore, src: ./config/gitignore, dest: ~/.gitignore, force: yes }
          - { name: gitmessage, src: ./config/gitmessage, dest: ~/.gitmessage, force: yes }
        loop_control:
          label: '{{ item.name }}'
     become_user: vagrant

# docker -------------------------------------------------------------

   - block: # docker
      - name: Create Docker group
        group:
          name: docker
          state: present
      - name: Add to Docker group
        user:
          name: vagrant
          groups: docker
          append: yes
      - name: Start Docker service
        systemd:
          name: docker.service
          daemon_reload: yes
          enabled: yes
          state: started
      - name: Docker prune Cron job
        cron:
          name: docker prune
          hour: "02"
          job: docker system prune -f
          user: vagrant
          cron_file: docker_prune

# kubectl ------------------------------------------------------------

      - name: Create .kube directory
        file:
          path: ~/.kube
          state: directory
          owner: vagrant
        become_user: vagrant

# postgres -----------------------------------------------------------

   - block:
      - name: Postgres container
        docker_container:
          name: postgres
          image: 'postgres:{{ versions.postgres }}'
          state: started
          restart_policy: always
          ports:
          - "5432:5432"
          env:
            SECRET_KEY: postgres
      - name: Add .pgpass file
        copy:
          remote_src: yes
          src: ./config/pgpass
          dest: ~/.pgpass
          owner: vagrant
          mode: '600'
        become_user: vagrant

# project ------------------------------------------------------------

   - block: # project
      - name: Download Project
        unarchive:
          src:  https://github.com/delineateio/project/archive/latest.tar.gz
          dest: /tmp/
          remote_src: yes
          creates: ~/project
      - name: Add Project
        command: mv /tmp/project-latest ~/project
        args:
          creates: ~/project
      - name: Init Git
        command: git init --quiet
        args:
          chdir: ~/project
          creates: ~/project/.git
      - name: Install pre-commit
        command: pre-commit install --install-hooks
        args:
          chdir: ~/project
     become_user: vagrant
